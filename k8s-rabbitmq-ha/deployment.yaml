# Setup StorageClass for the Dynamic Provisioning
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: alicloud-nas-rabbitmq
mountOptions:
- vers=4.0
provisioner: alicloud/nas
reclaimPolicy: Retain
---
# AliCloud Plugin for enabling Dynamic Provisioning NAS
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: alicloud-nas-controller-rabbitmq-nas
  namespace: kube-system
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: alicloud-nas-controller
    spec:
      tolerations:
      - effect: NoSchedule
        operator: Exists
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        operator: Exists
        key: node.cloudprovider.kubernetes.io/uninitialized
      nodeSelector:
         node-role.kubernetes.io/master: ""
      serviceAccount: admin
      containers:
        - name: alicloud-nas-controller-rabbitmq-nas
          image: registry.cn-hangzhou.aliyuncs.com/acs/alicloud-nas-controller:v3.1.0-k8s1.11
          volumeMounts:
          - mountPath: /persistentvolumes
            name: nfs-client-root
          env:
            - name: PROVISIONER_NAME
              value: alicloud/nas
            - name: NFS_SERVER
              value: xxxxxxxxxx-xxxxx.cn-beijing.nas.aliyuncs.com # TODO: Please update your mount URL of NAS
            - name: NFS_PATH
              value: /
      volumes:
        - name: nfs-client-root
          nfs:
            server: xxxxxxxxxx-xxxxx.cn-beijing.nas.aliyuncs.com # TODO: Please update your mount URL of NAS
            path: /
---
# Service Account for the RabbitMQ
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rabbitmq
  namespace: test-compose
---
# Service Account Role for the RabbitMQ
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: endpoint-reader
  namespace: test-compose
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get"]
---
# Bind Service Account and Role for the RabbitMQ
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: endpoint-reader
  namespace: test-compose
subjects:
- kind: ServiceAccount
  name: rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: endpoint-reader
---
# Configurations of RabbitMQ
# Enabling plugins
# Enabling Peer Discovery
# Enabling Cluster through Federation/Shovel for future use
# Enabling High Availability
# Setup username/password
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-config
  namespace: test-compose
data:
  enabled_plugins: |
    [ rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_consistent_hash_exchange, rabbitmq_federation, rabbitmq_federation_management, rabbitmq_shovel, rabbitmq_shovel_management ].
  rabbitmq.conf: |
    ## Cluster formation. See http://www.rabbitmq.com/cluster-formation.html to learn more.
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    ## Should RabbitMQ node name be computed from the pod's hostname or IP address?
    ## IP addresses are not stable, so using [stable] hostnames is recommended when possible.
    ## Set to "hostname" to use pod hostnames.
    ## When this value is changed, so should the variable used to set the RABBITMQ_NODENAME
    ## environment variable.
    cluster_formation.k8s.address_type = ip
    # cluster_formation.k8s.address_type = hostname
    ## How often should node cleanup checks run?
    cluster_formation.node_cleanup.interval = 30
    ## Set to false if automatic removal of unknown/absent nodes
    ## is desired. This can be dangerous, see
    ##  * http://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup
    ##  * https://groups.google.com/forum/#!msg/rabbitmq-users/wuOfzEywHXo/k8z_HWIkBgAJ
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    ## See http://www.rabbitmq.com/ha.html#master-migration-data-locality
    queue_master_locator = min-masters
    ## See http://www.rabbitmq.com/access-control.html#loopback-users
    loopback_users.guest = false
    management.load_definitions = /etc/rabbitmq/definitions.json
  definitions.json: |
    {
      "vhosts":[ {"name":"/"} ],
      "policies":[ { "vhost": "/", "name": "ha-all", "pattern": ".*", "definition": { "ha-mode": "all", "ha-sync-mode": "automatic", "ha-sync-batch-size": 1 } } ],
      "users": [ { "name": "guest", "password": "guest", "tags": "administrator" } ],
      "permissions": [ { "user": "guest", "vhost": "/", "configure": ".*", "write": ".*", "read": ".*" } ]
    }
---
# Deploy SteatfulSet of RabbitMQ
# Pull image from AliCloud Container Registry
# Dynamically provisioning storage
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq-ha
  namespace: test-compose
spec:
  selector:
    matchLabels: 
      app: rabbitmq-ha
  serviceName: rabbitmq-ha-discovery
  replicas: 3
  template:
    metadata:
      labels:
        app: rabbitmq-ha
    spec:
      serviceAccountName: rabbitmq
      terminationGracePeriodSeconds: 10
      imagePullSecrets:
        - name: registry-qingdao
      containers:
      - name: rabbitmq-ha
        image: registry.cn-qingdao.aliyuncs.com/gen4/rabbitmq-ha
        imagePullPolicy: IfNotPresent
        ports:
          - name: epmd
            protocol: TCP
            containerPort: 4369
          - name: amqp-0-9-1
            protocol: TCP
            containerPort: 5671
          - name: amqp-1-0
            protocol: TCP
            containerPort: 5672
          - name: management-1
            protocol: TCP
            containerPort: 15671
          - name: management-2
            protocol: TCP
            containerPort: 15672
          - name: communication
            protocol: TCP
            containerPort: 25672
        livenessProbe:
          exec:
            command: ["rabbitmqctl", "status"]
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command: ["rabbitmqctl", "status"]
          initialDelaySeconds: 20
          periodSeconds: 60
          timeoutSeconds: 10
        env:
          - name: POD_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: RABBITMQ_USE_LONGNAME
            value: "true"
          - name: RABBITMQ_NODENAME
            value: "rabbit@$(POD_IP_ADDRESS)"
          - name: K8S_SERVICE_NAME
            value: "rabbitmq-ha-discovery"
          - name: RABBITMQ_ERLANG_COOKIE
            value: "this-is-rabbitmq-cookie"
        volumeMounts:
          - name: config-volume
            mountPath: /etc/rabbitmq
          - name: rabbitmq-experiment-pvc-nas
            mountPath: /var/lib/rabbitmq
        resources:
          limits: 
            cpu: 100m
            memory: 512Mi
          requests:
            memory: 256Mi
      volumes:
        - name: config-volume
          configMap:
            name: rabbitmq-config
            items:
            - key: rabbitmq.conf
              path: rabbitmq.conf
            - key: enabled_plugins
              path: enabled_plugins
            - key: definitions.json
              path: definitions.json
  volumeClaimTemplates:
  - metadata: 
      name: rabbitmq-experiment-pvc-nas
    spec: 
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: alicloud-nas-rabbitmq
      resources: 
        requests: 
          storage: 1Gi
# ---
# Create Discovery Service (for NodePort type)
# kind: Service
# apiVersion: v1
# metadata:
#   namespace: test-compose
#   name: rabbitmq-ha-discovery
#   labels:
#     app: rabbitmq-ha-discovery
#     type: LoadBalancer  
# spec:
#   type: NodePort
#   ports:
#    - name: http
#      protocol: TCP
#      port: 15672
#      targetPort: 15672
#    - name: amqp
#      protocol: TCP
#      port: 5672
#      targetPort: 5672
#      nodePort: 30672
#   selector:
#     app: rabbitmq-ha
# ---
# kind: Service (For ClusterIP type)
# apiVersion: v1
# metadata:
#   namespace: test-compose
#   name: rabbitmq-ha-discovery
#   labels:
#     app: rabbitmq-ha-discovery
#     type: ClusterIP
# spec:
#   type: ClusterIP
#   ports:
#   - name: epmd
#     protocol: TCP
#     port: 4369
#     targetPort: 4369
#   - name: amqp-0-9-1
#     protocol: TCP
#     port: 5671
#     targetPort: 5671
#   - name: amqp-1-0
#     protocol: TCP
#     port: 5672
#     targetPort: 5672
#   - name: communication
#     protocol: TCP
#     port: 25672
#     targetPort: 25672
#   clusterIP: None
#   selector:
#     app: rabbitmq-ha
---
# Create internal loadbalancer
kind: Service
apiVersion: v1
metadata:
  namespace: test-compose
  name: rabbitmq-ha-discovery
  labels:
    app: rabbitmq-ha-discovery
    type: LoadBalancer
  annotations:
    service.beta.kubernetes.io/alicloud-loadbalancer-address-type: intranet
spec:
  type: LoadBalancer
  ports:
  - name: epmd
    protocol: TCP
    port: 4369
    targetPort: 4369
  - name: amqp-0-9-1
    protocol: TCP
    port: 5671
    targetPort: 5671
  - name: amqp-1-0
    protocol: TCP
    port: 5672
    targetPort: 5672
  - name: management
    protocol: TCP
    port: 15672
    targetPort: 15672
  - name: communication
    protocol: TCP
    port: 25672
    targetPort: 25672
  selector:
    app: rabbitmq-ha
---
# Create external loadbalancer for the management UI
kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  namespace: test-compose
  name: rabbitmq-ha-management
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    # @TODO, change hostname prefix and keep the domain from AliCloud (*.cb63acdf806e5464a88157679edf29697.cn-beijing.alicontainer.com)
    # e.g. rabbitmq-portal.cb63acdf806e5464a88157679edf29697.cn-beijing.alicontainer.com
    # or keep it as it is if there is no used prefix
    - host: >-
        rabbitmq-ha-management.cb63acdf806e5464a88157679edf29697.cn-beijing.alicontainer.com
      http:
        paths:
          - backend:
              serviceName: rabbitmq-ha-discovery
              servicePort: 15672
            path: /